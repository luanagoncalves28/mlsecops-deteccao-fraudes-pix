#!/bin/bash

# =======================================================================
# MLSecOps - Script de Verificação de Vulnerabilidades em Imagens Docker
# Autor: Luana Gonçalves
# Data: 13/05/2025
# Descrição: Verifica vulnerabilidades em imagens Docker usando Trivy
# =======================================================================

set -e
BLUE='\033[0;34m'
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # Sem cor

# Verificar se Trivy está instalado
if ! command -v trivy &> /dev/null; then
    echo -e "${RED}Trivy não está instalado. Instalando...${NC}"
    wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
    echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
    sudo apt-get update
    sudo apt-get install -y trivy
fi

# Gerar nome do relatório com timestamp
REPORT_FILE="image_scan_report_$(date +%Y%m%d_%H%M%S).txt"
REGISTRY="southamerica-east1-docker.pkg.dev/mlsecpix-456600/mlsecpix-images-dev"

echo "=====================================================
MLSecOps - Relatório de Verificação de Imagens
Data: $(date)
=====================================================
" > $REPORT_FILE

# Lista de imagens para verificar
IMAGES=(
    "${REGISTRY}/ml-metrics-exporter:latest"
)

TOTAL_CRITICAL=0
TOTAL_HIGH=0

for image in "${IMAGES[@]}"; do
    echo -e "${BLUE}Verificando vulnerabilidades na imagem: ${image}${NC}"
    echo -e "\n--------------------------------------------------" >> $REPORT_FILE
    echo "VERIFICANDO IMAGEM: $image" >> $REPORT_FILE
    echo "--------------------------------------------------" >> $REPORT_FILE
    
    # Executar Trivy com saída formatada
    SCAN_RESULT=$(trivy image --no-progress --severity HIGH,CRITICAL --format json "$image")
    
    # Extrair contagens de vulnerabilidades
    CRITICAL_COUNT=$(echo "$SCAN_RESULT" | jq '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "CRITICAL") | .VulnerabilityID' | wc -l)
    HIGH_COUNT=$(echo "$SCAN_RESULT" | jq '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "HIGH") | .VulnerabilityID' | wc -l)
    
    TOTAL_CRITICAL=$((TOTAL_CRITICAL + CRITICAL_COUNT))
    TOTAL_HIGH=$((TOTAL_HIGH + HIGH_COUNT))
    
    # Adicionar resultados ao relatório
    echo "Vulnerabilidades críticas: $CRITICAL_COUNT" >> $REPORT_FILE
    echo "Vulnerabilidades de alta severidade: $HIGH_COUNT" >> $REPORT_FILE
    
    if [[ $CRITICAL_COUNT -gt 0 || $HIGH_COUNT -gt 0 ]]; then
        echo -e "\nDetalhes das vulnerabilidades:" >> $REPORT_FILE
        echo "$SCAN_RESULT" | jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "CRITICAL" or .Severity == "HIGH") | "• \(.VulnerabilityID) (\(.Severity)): \(.Title)\n  Pacote afetado: \(.PkgName) \(.InstalledVersion)\n  Versão corrigida: \(.FixedVersion)\n"' >> $REPORT_FILE
        
        # Exibir no console
        echo -e "${RED}Encontradas $CRITICAL_COUNT vulnerabilidades críticas${NC}"
        echo -e "${YELLOW}Encontradas $HIGH_COUNT vulnerabilidades de alta severidade${NC}"
    else
        echo -e "\nNenhuma vulnerabilidade crítica ou de alta severidade encontrada." >> $REPORT_FILE
        echo -e "${GREEN}Nenhuma vulnerabilidade crítica ou de alta severidade encontrada.${NC}"
    fi
done

# Resumo
echo -e "\n${BLUE}Resumo da verificação de imagens:${NC}"
echo -e "===========================================" >> $REPORT_FILE
echo "RESUMO DA VERIFICAÇÃO DE IMAGENS" >> $REPORT_FILE
echo -e "Total de vulnerabilidades críticas: ${TOTAL_CRITICAL}" >> $REPORT_FILE
echo -e "Total de vulnerabilidades de alta severidade: ${TOTAL_HIGH}" >> $REPORT_FILE
echo -e "===========================================" >> $REPORT_FILE

echo -e "${RED}Total de vulnerabilidades críticas: ${NC}${TOTAL_CRITICAL}"
echo -e "${YELLOW}Total de vulnerabilidades de alta severidade: ${NC}${TOTAL_HIGH}"
echo -e "${BLUE}Relatório salvo em: ${NC}${REPORT_FILE}"

# Limites para aprovar ou reprovar o scan
if [[ $TOTAL_CRITICAL -gt 0 ]]; then
    echo -e "${RED}✗ Verificação de imagens falhou: Encontradas vulnerabilidades críticas${NC}"
    echo -e "RESULTADO: FALHA - Vulnerabilidades críticas encontradas" >> $REPORT_FILE
    exit 1
elif [[ $TOTAL_HIGH -gt 5 ]]; then
    echo -e "${RED}✗ Verificação de imagens falhou: Muitas vulnerabilidades de alta severidade${NC}"
    echo -e "RESULTADO: FALHA - Muitas vulnerabilidades de alta severidade" >> $REPORT_FILE
    exit 1
else
    echo -e "${GREEN}✓ Verificação de imagens passou${NC}"
    echo -e "RESULTADO: PASSOU - Com advertências" >> $REPORT_FILE
    exit 0
fi