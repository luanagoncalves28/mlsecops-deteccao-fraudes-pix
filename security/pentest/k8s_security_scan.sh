#!/bin/bash
# Script de verificação de segurança para MLSecOps
# Autor: Luana Gonçalves
# Data: Abril 2025

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Função para imprimir cabeçalho
print_header() {
    echo -e "${YELLOW}\n======== $1 ========${NC}\n"
}

# Função para verificar sucesso/falha
check_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}✓ $2${NC}"
    else
        echo -e "${RED}✗ $2${NC}"
    fi
}

# Data atual para reports
DATE=$(date +"%Y-%m-%d_%H-%M-%S")
REPORT_FILE="security_report_${DATE}.txt"

# Iniciar report
echo "MLSecOps Security Scan - $(date)" > $REPORT_FILE
echo "=====================================" >> $REPORT_FILE

# Verificar se as ferramentas necessárias estão disponíveis
print_header "Verificando dependências"
for cmd in kubectl gsutil gcloud jq; do
    if command -v $cmd &> /dev/null; then
        echo -e "${GREEN}✓ $cmd está instalado${NC}"
        echo "✓ $cmd está instalado" >> $REPORT_FILE
    else
        echo -e "${RED}✗ $cmd não está instalado${NC}"
        echo "✗ $cmd não está instalado" >> $REPORT_FILE
        exit 1
    fi
done

# 1. Verificar buckets públicos
print_header "Verificando buckets com acesso público"
echo -e "\n--- Verificação de buckets públicos ---" >> $REPORT_FILE

PROJECT_ID=$(gcloud config get-value project)
gsutil ls -p $PROJECT_ID | while read bucket; do
    echo "Verificando $bucket..."
    acl=$(gsutil iam get $bucket 2>/dev/null | grep -E "allUsers|allAuthenticatedUsers")
    if [ ! -z "$acl" ]; then
        echo -e "${RED}✗ ALERTA: Bucket $bucket possui acesso público!${NC}"
        echo "✗ ALERTA: Bucket $bucket possui acesso público!" >> $REPORT_FILE
        echo "  $acl" >> $REPORT_FILE
    else
        echo -e "${GREEN}✓ Bucket $bucket - OK${NC}"
        echo "✓ Bucket $bucket - OK" >> $REPORT_FILE
    fi
done

# 2. Verificar pods com escalação de privilégios
print_header "Verificando pods com privilégios elevados"
echo -e "\n--- Verificação de pods com privilégios ---" >> $REPORT_FILE

privileged_pods=$(kubectl get pods --all-namespaces -o json | jq -r '.items[] | select(.spec.containers[].securityContext.privileged==true) | .metadata.name + " (" + .metadata.namespace + ")"')

if [ -z "$privileged_pods" ]; then
    echo -e "${GREEN}✓ Nenhum pod com privilégios elevados encontrado${NC}"
    echo "✓ Nenhum pod com privilégios elevados encontrado" >> $REPORT_FILE
else
    echo -e "${RED}✗ Pods com privilégios elevados encontrados:${NC}"
    echo "✗ Pods com privilégios elevados encontrados:" >> $REPORT_FILE
    echo "$privileged_pods" | while read pod; do
        echo "  - $pod"
        echo "  - $pod" >> $REPORT_FILE
    done
fi

# 3. Verificar secrets não criptografados
print_header "Verificando secrets"
echo -e "\n--- Verificação de secrets ---" >> $REPORT_FILE

total_secrets=$(kubectl get secrets --all-namespaces | wc -l)
echo "Total de secrets encontrados: $((total_secrets-1))" # Descontar a linha de cabeçalho
echo "Total de secrets encontrados: $((total_secrets-1))" >> $REPORT_FILE

# 4. Verificar portas expostas
print_header "Verificando serviços expostos"
echo -e "\n--- Verificação de serviços expostos ---" >> $REPORT_FILE

exposed_services=$(kubectl get services --all-namespaces -o json | jq -r '.items[] | select(.spec.type=="LoadBalancer" or .spec.type=="NodePort") | .metadata.name + " (" + .metadata.namespace + ") - " + .spec.type')

echo "$exposed_services" | while read service; do
    if [ ! -z "$service" ]; then
        echo "⚠️  Serviço exposto: $service"
        echo "⚠️  Serviço exposto: $service" >> $REPORT_FILE
    fi
done

# 5. Verificar configurações seguras do Kubernetes
print_header "Verificando configurações seguras do Kubernetes"
echo -e "\n--- Verificação de configurações seguras do Kubernetes ---" >> $REPORT_FILE

# Verificar NetworkPolicies
network_policies=$(kubectl get networkpolicies --all-namespaces 2>/dev/null | wc -l)
if [ $network_policies -le 1 ]; then
    echo -e "${YELLOW}⚠️  Poucas ou nenhuma NetworkPolicy encontrada!${NC}"
    echo "⚠️  Poucas ou nenhuma NetworkPolicy encontrada!" >> $REPORT_FILE
    echo "  Recomendação: Implemente NetworkPolicies para restringir comunicação entre pods" >> $REPORT_FILE
else
    echo -e "${GREEN}✓ NetworkPolicies configuradas${NC}"
    echo "✓ NetworkPolicies configuradas" >> $REPORT_FILE
fi

# Verificar PodSecurityPolicies ou Pod Security Standards
psp_count=$(kubectl get psp 2>/dev/null | wc -l)
if [ $psp_count -le 1 ]; then
    echo -e "${YELLOW}⚠️  Nenhuma PodSecurityPolicy encontrada!${NC}"
    echo "⚠️  Nenhuma PodSecurityPolicy encontrada!" >> $REPORT_FILE
    echo "  Recomendação: Configure PodSecurityPolicies ou Pod Security Standards" >> $REPORT_FILE
else
    echo -e "${GREEN}✓ PodSecurityPolicies configuradas${NC}"
    echo "✓ PodSecurityPolicies configuradas" >> $REPORT_FILE
fi

# 6. Verificar recursos sem limites definidos
print_header "Verificando pods sem limites de recursos"
echo -e "\n--- Verificação de limites de recursos ---" >> $REPORT_FILE

no_limits=$(kubectl get pods --all-namespaces -o json | jq -r '.items[] | select(.spec.containers[].resources.limits | not) | .metadata.name + " (" + .metadata.namespace + ")"')

if [ -z "$no_limits" ]; then
    echo -e "${GREEN}✓ Todos os pods têm limites de recursos definidos${NC}"
    echo "✓ Todos os pods têm limites de recursos definidos" >> $REPORT_FILE
else
    echo -e "${YELLOW}⚠️  Pods sem limites de recursos:${NC}"
    echo "⚠️  Pods sem limites de recursos:" >> $REPORT_FILE
    echo "$no_limits" | while read pod; do
        if [ ! -z "$pod" ]; then
            echo "  - $pod"
            echo "  - $pod" >> $REPORT_FILE
        fi
    done
fi

# Resumo final
print_header "Resumo do Scan de Segurança"
echo -e "\n--- Resumo do Scan de Segurança ---" >> $REPORT_FILE
echo "Scan completo. Relatório salvo em: $REPORT_FILE"
echo "Verifique os itens destacados e implemente as correções necessárias."
echo "Scan completo. Verifique os itens destacados e implemente as correções necessárias." >> $REPORT_FILE

# Finalizar com mensagem clara
echo -e "\n${YELLOW}Para integrar este teste no seu pipeline CI/CD:${NC}"
echo "1. Adicione este script como um job no seu .github/workflows/security-scan.yml"
echo "2. Configure para executar periodicamente ou em pull requests"
echo "3. Defina thresholds para falha do pipeline baseado nos resultados"